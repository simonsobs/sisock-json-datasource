{"version":3,"sources":["../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","scope","casc_max","casc_level","i","target","type","onChangeInternal","max_lev","casc","push","length","query","opts_promise","datasource","metricFindQuery","level","then","prefix","getCasc","join","opts","_","map","v","value","startsWith","split","filter","o","indexOf","text","rawQuery","comps","setCasc","panelCtrl","refresh","getCascOptions","opt","includes","slice","QueryCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n\n    // The casc_max should match the number of dropdowns defined in\n    // query.editor.html.  There is not much internal checking on this\n    // limit, though.\n    this.casc_max = 10;\n\n    this.casc_level = 0;\n    for (var i=0; i <this.casc_max; i++)\n      this['casc_data' + i] = '';\n\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || 'timeserie';\n    if (this.target.target != 'select_metric')\n      this.onChangeInternal(-1);\n  }\n\n  getCasc(max_lev) {\n    // Returns the current casc_dataX as an array.\n    if (max_lev < 0 || max_lev > this.casc_level)\n      max_lev = this.casc_level;\n    var casc = [];\n    for (var i=0; i <max_lev; i++)\n      casc.push(this['casc_data' + i]);\n    return casc;\n  }\n\n  setCasc(casc) {\n    // Loads the values from casc into this.casc_data0+ and updates casc_level.\n    this.casc_level = casc.length;\n    for (var i=0; i <casc.length; i++)\n      this['casc_data' + i] = casc[i];\n  }\n\n  getOptions(query) {\n    this.opts_promise = this.datasource.metricFindQuery(query || '');\n    return this.opts_promise;\n  }\n\n  getCascOptions(level) {\n    return this.opts_promise.then(opts => {\n      var prefix = '';\n      if (level > 0) {\n        var casc = this.getCasc(level);\n        prefix = casc.join('.');\n      }\n      opts = _.map(opts, v => {\n        if (!v.value.startsWith(prefix))\n          return null;\n        if (v.value == prefix)\n          return '<end>';\n        return v.value.split('.')[level];\n      });\n      opts = _.filter(opts, (v,i,o) => v && o.indexOf(v) === i);\n      return _.map(opts, v => {\n        return {text: v, value: v};\n      });\n    });\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal(level) {\n    // Keep this.target.target and this.casc_data0- in sync.\n    //\n    // Call with level = -1 if target is changed.\n    // Call with level = N if boxN is changed.\n    if (level < 0) {\n      // Decompose target into the components.\n      var comps = this.target.target.split('.');\n      comps.push('<end>');\n      this.setCasc(comps);\n      this.panelCtrl.refresh(); // Asks the panel to refresh data.\n    } else {\n      this.getCascOptions(level).then(opts => {\n        var casc = this.getCasc(level+1);\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n        opts = _.map(opts, opt => opt.value);\n        // Check if we match one of the options?\n        if (!opts.includes(casc[level])) {\n          // Set to the first option in the list.\n          casc[level] = opts[0];\n          this.setCasc(casc);\n        }\n        if (casc[level] != '<end>')\n          return this.onChangeInternal(level+1);\n\n        this.target.target = casc.slice(0,level).join('.');\n        this.setCasc(casc);\n        this.panelCtrl.refresh(); // Asks the panel to refresh data.\n      });\n    }\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}